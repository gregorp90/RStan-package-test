# train-test splits
cv_force        <- F
cv_k            <- 3
# nsplits         <- 3 # some big number if you want all splits
nplits          <- c(3)
force_overwrite <- F
nfac            <- 2
nit             <- 5000
print_psi       <- F
# datasets
datasets <- list(
# toy_00   = "toy_00.rds",
# toy_01   = "toy_01.rds",
# toy_02   = "toy_02.rds",
# toy_03   = "toy_03.rds",
# basket   = "basketball.rds"
# foot     = "football.rds"
# afoot    = "afootball.rds"
LoL      = "LoL.rds"
)
# models -----------------------------------------------------------------------
models <- list()
# # baseline Poisson Bayesian
# models[[length(models)+1]] <- list(name   = "baselineb",
#                                    type   = "baseline",
#                                    t_call = paste0("baselineb(train, gp_train)"),
#                                    p_call = paste0("baselineb_pred(tr_fa, gp_test, test)"))
#
# models[[length(models)+1]] <- list(name   = paste0("diag02_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"diagonal02\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("cbgfa2_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cbfa2_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cbfa2_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# grouped PFA Stan
models[[length(models)+1]] <- list(name   = paste0("gPFA_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("gpfa_stan(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("gpfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # Copula grouped PFA Stan
# models[[length(models)+1]] <- list(name   = paste0("CgPFA_corr_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cgpfa(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gPFA_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cgpfa_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# # # NBFA Stan pscalar
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# # SCALAR COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
#
# # # NEW PROPOSAL
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# # NEW PROPOSAL COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# evaluate ---------------------------------------------------------------------
t1 <- Sys.time()
my_results <- eval2_fa(datasets, models, cv_force, cv_k, wd,
nsplits, force_overwrite, print_psi)
t2 <- Sys.time()
t2 - t1
# results ----------------------------------------------------------------------
my_results$results
saveRDS(my_results, file = paste0("./results/results/bfa_results_all_",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
saveRDS(my_results, file = paste0("./results/results/bfa_results_",
# "basket_",
# "foot_",
# "afoot_",
"LoL",
# "all_cbfa2",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
#system("Shutdown.exe -h")
# This is the script for the evaluation of count-data FA. The data for testing
# is saved in ./data_clean and has the same format.
# INIT -------------------------------------------------------------------------
rm(list = ls(all = T))
gc()
# wd <- paste("C:\\Users\\Gregor\\Documents\\Shared files\\MR\\Research\\",
#             "Bayesian count factor analysis\\bfa_framework\\",
#             sep = "")
wd <- paste("C:\\Users\\Gregor\\Documents\\shared_files\\Research\\",
"Bayesian count factor analysis\\bfa_framework\\",
sep = "")
setwd(wd)
for (fn in list.files("./R_functions", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
for (fn in list.files("./R_models", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
library(plyr)
library(tmvtnorm)
library(OpenMx)
library(MASS)
library(fitdistrplus)
library(dplyr)
library(MCMCpack)
library(reshape2)
library(ggplot2)
library(rstan)
library(cubature)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# ------------------------------------------------------------------------------
# select evaluation parameters, datasets, and models ---------------------------
# train-test splits
cv_force        <- F
cv_k            <- 3
# nsplits         <- 3 # some big number if you want all splits
nplits          <- c(3)
force_overwrite <- T
nfac            <- 2
nit             <- 2000
print_psi       <- F
# datasets
datasets <- list(
# toy_00   = "toy_00.rds",
# toy_01   = "toy_01.rds",
# toy_02   = "toy_02.rds",
# toy_03   = "toy_03.rds",
# basket   = "basketball.rds"
# foot     = "football.rds"
# afoot    = "afootball.rds"
LoL      = "LoL.rds"
)
# models -----------------------------------------------------------------------
models <- list()
# # baseline Poisson Bayesian
# models[[length(models)+1]] <- list(name   = "baselineb",
#                                    type   = "baseline",
#                                    t_call = paste0("baselineb(train, gp_train)"),
#                                    p_call = paste0("baselineb_pred(tr_fa, gp_test, test)"))
#
# models[[length(models)+1]] <- list(name   = paste0("diag02_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"diagonal02\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("cbgfa2_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cbfa2_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cbfa2_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# grouped PFA Stan
models[[length(models)+1]] <- list(name   = paste0("gPFA_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("gpfa_stan(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("gpfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # Copula grouped PFA Stan
# models[[length(models)+1]] <- list(name   = paste0("CgPFA_corr_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cgpfa(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gPFA_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cgpfa_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # # NBFA Stan pscalar
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# # SCALAR COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
#
# # # NEW PROPOSAL
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# # NEW PROPOSAL COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# evaluate ---------------------------------------------------------------------
t1 <- Sys.time()
my_results <- eval2_fa(datasets, models, cv_force, cv_k, wd,
nsplits, force_overwrite, print_psi)
t2 <- Sys.time()
t2 - t1
# results ----------------------------------------------------------------------
my_results$results
saveRDS(my_results, file = paste0("./results/results/bfa_results_all_",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
saveRDS(my_results, file = paste0("./results/results/bfa_results_",
# "basket_",
# "foot_",
# "afoot_",
"LoL",
# "all_cbfa2",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
#system("Shutdown.exe -h")
# This is the script for the evaluation of count-data FA. The data for testing
# is saved in ./data_clean and has the same format.
# INIT -------------------------------------------------------------------------
rm(list = ls(all = T))
gc()
# wd <- paste("C:\\Users\\Gregor\\Documents\\Shared files\\MR\\Research\\",
#             "Bayesian count factor analysis\\bfa_framework\\",
#             sep = "")
wd <- paste("C:\\Users\\Gregor\\Documents\\shared_files\\Research\\",
"Bayesian count factor analysis\\bfa_framework\\",
sep = "")
setwd(wd)
for (fn in list.files("./R_functions", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
for (fn in list.files("./R_models", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
library(plyr)
library(tmvtnorm)
library(OpenMx)
library(MASS)
library(fitdistrplus)
library(dplyr)
library(MCMCpack)
library(reshape2)
library(ggplot2)
library(rstan)
library(cubature)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# ------------------------------------------------------------------------------
# select evaluation parameters, datasets, and models ---------------------------
# train-test splits
cv_force        <- F
cv_k            <- 3
# nsplits         <- 3 # some big number if you want all splits
nplits          <- c(3)
force_overwrite <- T
nfac            <- 2
nit             <- 2000
print_psi       <- F
# datasets
datasets <- list(
# toy_00   = "toy_00.rds",
# toy_01   = "toy_01.rds",
# toy_02   = "toy_02.rds",
# toy_03   = "toy_03.rds",
# basket   = "basketball.rds"
# foot     = "football.rds"
# afoot    = "afootball.rds"
LoL      = "LoL.rds"
)
# models -----------------------------------------------------------------------
models <- list()
# # baseline Poisson Bayesian
# models[[length(models)+1]] <- list(name   = "baselineb",
#                                    type   = "baseline",
#                                    t_call = paste0("baselineb(train, gp_train)"),
#                                    p_call = paste0("baselineb_pred(tr_fa, gp_test, test)"))
#
# models[[length(models)+1]] <- list(name   = paste0("diag02_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"diagonal02\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("bfa_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# models[[length(models)+1]] <- list(name   = paste0("cbgfa2_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cbfa2_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gfa_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cbfa2_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# grouped PFA Stan
models[[length(models)+1]] <- list(name   = paste0("gPFA_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("gpfa_stan(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("gpfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # Copula grouped PFA Stan
# models[[length(models)+1]] <- list(name   = paste0("CgPFA_corr_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cgpfa(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gPFA_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cgpfa_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # # NBFA Stan pscalar
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
# # SCALAR COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
#
# # # NEW PROPOSAL
# models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("nbfa_3_stan_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    p_call = paste0("nbfa_3_stan_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# # NEW PROPOSAL COPULA
# models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cnbfa_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cnbfa_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
#
#
# evaluate ---------------------------------------------------------------------
t1 <- Sys.time()
my_results <- eval2_fa(datasets, models, cv_force, cv_k, wd,
nsplits, force_overwrite, print_psi)
t2 <- Sys.time()
t2 - t1
# results ----------------------------------------------------------------------
my_results$results
saveRDS(my_results, file = paste0("./results/results/bfa_results_all_",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
saveRDS(my_results, file = paste0("./results/results/bfa_results_",
# "basket_",
# "foot_",
# "afoot_",
"LoL",
# "all_cbfa2",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
#system("Shutdown.exe -h")
# This is the script for the evaluation of count-data FA. The data for testing
# is saved in ./data_clean and has the same format.
# INIT -------------------------------------------------------------------------
rm(list = ls(all = T))
gc()
# wd <- paste("C:\\Users\\Gregor\\Documents\\Shared files\\MR\\Research\\",
#             "Bayesian count factor analysis\\bfa_framework\\",
#             sep = "")
wd <- paste("C:\\Users\\Gregor\\Documents\\shared_files\\Research\\",
"Bayesian count factor analysis\\bfa_framework\\",
sep = "")
setwd(wd)
for (fn in list.files("./R_functions", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
for (fn in list.files("./R_models", full.names = T)) {
cat("Sourcing ", fn, "\n")
source(fn)
}
library(plyr)
library(tmvtnorm)
library(OpenMx)
library(MASS)
library(fitdistrplus)
library(dplyr)
library(MCMCpack)
library(reshape2)
library(ggplot2)
library(rstan)
library(cubature)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# ------------------------------------------------------------------------------
# select evaluation parameters, datasets, and models ---------------------------
# train-test splits
cv_force        <- F
cv_k            <- 3
# nsplits         <- 3 # some big number if you want all splits
nplits          <- c(3)
force_overwrite <- F
nfac            <- 2
nit             <- 2000
print_psi       <- F
# datasets
datasets <- list(
# toy_00   = "toy_00.rds",
# toy_01   = "toy_01.rds",
# toy_02   = "toy_02.rds",
# toy_03   = "toy_03.rds",
# basket   = "basketball.rds"
# foot     = "football.rds"
# afoot    = "afootball.rds"
LoL      = "LoL.rds"
)
# models -----------------------------------------------------------------------
models <- list()
# baseline Poisson Bayesian
models[[length(models)+1]] <- list(name   = "baselineb",
type   = "baseline",
t_call = paste0("baselineb(train, gp_train)"),
p_call = paste0("baselineb_pred(tr_fa, gp_test, test)"))
models[[length(models)+1]] <- list(name   = paste0("diag02_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("bfa_stan(\"diagonal02\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
models[[length(models)+1]] <- list(name   = paste0("gfa_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("bfa_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("bfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
models[[length(models)+1]] <- list(name   = paste0("cbgfa2_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("cbfa2_stan(\"gfa\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
samps  = paste0("gfa_nfac", nfac, "_nit", nit),
p_call = paste0("cbfa2_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# grouped PFA Stan
models[[length(models)+1]] <- list(name   = paste0("gPFA_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("gpfa_stan(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("gpfa_stan_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # Copula grouped PFA Stan
# models[[length(models)+1]] <- list(name   = paste0("CgPFA_corr_nfac", nfac, "_nit", nit),
#                                    type   = "basic_fa",
#                                    t_call = paste0("cgpfa(\"gPFA\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
#                                    samps  = paste0("gPFA_nfac", nfac, "_nit", nit),
#                                    p_call = paste0("cgpfa_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # NBFA Stan pscalar
models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("nbfa_3_stan_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("nbfa_3_stan_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# SCALAR COPULA
models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalar_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("cnbfa_pscalar(\"gNBFA_v3_pscalar\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
samps  = paste0("gNBFA_v3_pscalar_nfac", nfac, "_nit", nit),
p_call = paste0("cnbfa_pscalar_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# # NEW PROPOSAL
models[[length(models)+1]] <- list(name   = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("nbfa_3_stan_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
p_call = paste0("nbfa_3_stan_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# NEW PROPOSAL COPULA
models[[length(models)+1]] <- list(name   = paste0("CNBFA_corr_v3_pscalarCol_nfac", nfac, "_nit", nit),
type   = "basic_fa",
t_call = paste0("cnbfa_pscalarCol(\"gNBFA_v3_pscalarCol\", train, nfac = ", nfac, ", gp_train, nit = ", nit, ", gp_meth = 'avg_factor')"),
samps  = paste0("gNBFA_v3_pscalarCol_nfac", nfac, "_nit", nit),
p_call = paste0("cnbfa_pscalarCol_pred(tr_fa, gp_test, test, L_intg = F, L_trnc = F, scale_dat = T)"))
# evaluate ---------------------------------------------------------------------
t1 <- Sys.time()
my_results <- eval2_fa(datasets, models, cv_force, cv_k, wd,
nsplits, force_overwrite, print_psi)
t2 <- Sys.time()
t2 - t1
# results ----------------------------------------------------------------------
my_results$results
saveRDS(my_results, file = paste0("./results/results/bfa_results_all_",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
saveRDS(my_results, file = paste0("./results/results/bfa_results_",
# "basket_",
# "foot_",
# "afoot_",
"LoL",
# "all_cbfa2",
Sys.Date(), "_nit",nit, "_nfacs", ".rds"))
#system("Shutdown.exe -h")
library(rstanalm)
devtools::install(local=FALSE)
devtools::install(local=FALSE, args = "no-multiarch")
devtools::install(local=FALSE, args = "--no-multiarch")
devtools::install(local = FALSE, args = "--no-multiarch")
library("rstanalm")
library("rstanlm")
fit <- lm_stan(y = rnorm(10), x = rnorm(10), iter = 500)
